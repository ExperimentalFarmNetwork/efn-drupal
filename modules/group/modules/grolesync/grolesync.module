<?php

/**
 * @file
 * Allows you to synchronize global roles to special 'outsider' group roles.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\User\RoleInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupTypeInterface;

/**
 * Gets the group role synchronizer service.
 *
 * @return \Drupal\grolesync\GroupRoleSynchronizerInterface
 *   The group role synchronizer service.
 *
 * @internal Try to properly inject the service when possible.
 */
function _grolesync_synchronizer() {
  return \Drupal::service('grolesync.synchronizer');
}

/**
 * Implements hook_rebuild().
 */
function grolesync_rebuild() {
  _grolesync_synchronizer()->createGroupRoles();
}

/**
 * Implements hook_modules_installed().
 */
function grolesync_modules_installed($modules) {
  _grolesync_synchronizer()->createGroupRoles();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function grolesync_group_type_insert(GroupTypeInterface $group_type) {
  _grolesync_synchronizer()->createGroupRoles([$group_type->id()]);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function grolesync_user_role_insert(RoleInterface $role) {
  _grolesync_synchronizer()->createGroupRoles(NULL, [$role->id()]);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function grolesync_user_role_update(RoleInterface $role) {
  /** @var \Drupal\User\RoleInterface $original */
  $original = $role->original;

  // Update the group roles if the user role label changed.
  if ($role->label() != $original->label()) {
    _grolesync_synchronizer()->updateGroupRoleLabels($role);
  }
}

/**
 * Implements hook_entity_operation().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity on which the linked operations will be performed.
 *
 * @return array
 */
function grolesync_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() == 'group_type') {
    $operations['synchronized-roles'] = array(
      'title' => t('Synchronized roles'),
      'url' => Url::fromRoute('entity.group_type.grolesync', ['group_type' => $entity->id()]),
      'weight' => 43,
    );
  }

  return $operations;
}

/**
 * Implements hook_group_user_roles_alter().
 *
 * @param string[] $role_ids
 *   The list of GroupRole IDs the user would normally get.
 * @param Drupal\Core\Session\AccountInterface $account
 *   The user who is to receive the roles.
 * @param Drupal\group\Entity\GroupInterface $group
 *   The group for which the user is to receive the roles.
 */
function grolesync_group_user_roles_alter(&$role_ids, AccountInterface $account, GroupInterface $group) {
  $synchronizer = _grolesync_synchronizer();
  foreach ($account->getRoles(TRUE) as $role_id) {
    $role_ids[] = $synchronizer->getGroupRoleId($group->bundle(), $role_id);
  }
}
