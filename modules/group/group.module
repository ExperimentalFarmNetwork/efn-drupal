<?php

/**
 * @file
 * Allows you to group users, content and other entities.
 */

use Drupal\group\Entity\GroupContent;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function group_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.group_type.content_plugins':
      return '<p>' . t('Entities that can be added to this group type.') . '</p>';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function group_element_info_alter(array &$types) {
  // Attach our extra CSS for toolbar icons.
  if (isset($types['toolbar'])) {
    $types['toolbar']['#attached']['library'][] = 'group/toolbar';
  }
}

/**
 * Implements hook_theme().
 */
function group_theme() {
  return [
    'group' => [
      'render element' => 'elements',
    ],
    'group_content' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function group_theme_suggestions_group(array $variables) {
  $suggestions = [];

  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['elements']['#group'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'group__' . $sanitized_view_mode;
  $suggestions[] = 'group__' . $group->bundle();
  $suggestions[] = 'group__' . $group->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'group__' . $group->id();
  $suggestions[] = 'group__' . $group->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function group_theme_suggestions_group_content(array $variables) {
  $suggestions = [];

  /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
  $group_content = $variables['elements']['#group_content'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'group_content__' . $sanitized_view_mode;
  $suggestions[] = 'group_content__' . $group_content->bundle();
  $suggestions[] = 'group_content__' . $group_content->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'group_content__' . $group_content->id();
  $suggestions[] = 'group_content__' . $group_content->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for the group template.
 *
 * Default template: group.html.twig
 *
 * @param array $variables
 *   - elements: An array of elements to display in view mode.
 *   - group: The group object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_group(&$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['elements']['#group'];

  $variables['group'] = $group;
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['label'] = $group->label();
  $variables['url'] = $group->toUrl('canonical', ['language' => $group->language()]);

  // See if we are rendering the group at its canonical route.
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.group.canonical') {
    $page_group = $route_match->getParameter('group');
  }
  $is_page = (!empty($page_group) ? $page_group->id() == $group->id() : FALSE);
  $variables['page'] = $variables['view_mode'] == 'full' && $is_page;

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for the group content template.
 *
 * Default template: group-content.html.twig
 *
 * @param array $variables
 *   - elements: An array of elements to display in view mode.
 *   - group_content: The group content object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_group_content(&$variables) {
  /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
  $group_content = $variables['elements']['#group_content'];

  $variables['group_content'] = $group_content;
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['label'] = $group_content->label();
  $variables['url'] = $group_content->toUrl('canonical', ['language' => $group_content->language()]);

  // See if we are rendering the group at its canonical route.
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.group_content.canonical') {
    $page_group_content = $route_match->getParameter('group_content');
  }
  $is_page = (!empty($page_group_content) ? $page_group_content->id() == $group_content->id() : FALSE);
  $variables['page'] = $variables['view_mode'] == 'full' && $is_page;

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Gets the group content enabler plugin manager.
 *
 * @return \Drupal\group\Plugin\GroupContentEnablerManagerInterface
 *   The group content enabler plugin manager.
 *
 * @internal Try to properly inject the service when possible.
 */
function _group_content_enabler_manager() {
  return \Drupal::service('plugin.manager.group_content_enabler');
}

/**
 * Implements hook_rebuild().
 */
function group_rebuild() {
  _group_content_enabler_manager()->installEnforced();
}

/**
 * Implements hook_modules_installed().
 */
function group_modules_installed($modules) {
  _group_content_enabler_manager()->installEnforced();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function group_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['visibility']['group_type'])) {
    $form['visibility_tabs']['#attached']['library'][] = 'group/block';
    $form['visibility']['group_type']['#title'] = t('Group types');
    $form['visibility']['group_type']['negate']['#type'] = 'value';
    $form['visibility']['group_type']['negate']['#title_display'] = 'invisible';
    $form['visibility']['group_type']['negate']['#value'] = $form['visibility']['group_type']['negate']['#default_value'];
  }
}

/**
 * Implements hook_entity_delete().
 */
function group_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    if ($group_contents = GroupContent::loadByEntity($entity)) {
      /** @var \Drupal\group\Entity\GroupContent $group_content */
      foreach ($group_contents as $group_content) {
        $group_content->delete();
      }
    }
  }
}

/**
 * Implements hook_entity_field_access().
 *
 * {@inheritdoc}
 *
 * @todo Move this to a form controller so we can hide the field if it has no
 *       options available to it?
 */
function group_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // We only care about the group roles field for now.
  if ($field_definition->getName() != 'group_roles') {
    return AccessResult::neutral();
  }

  // Can't retrieve an entity from an empty item list.
  if (!isset($items)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupContent $group_content */
  $group_content = $items->getEntity();
  $group = $group_content->getGroup();

  // Just to be safe, let's check the plugin ID.
  if ($group_content->getContentPlugin()->getPluginId() == 'group_membership') {
    // Only group administrators should be able to change the membership roles.
    return AccessResult::forbiddenIf(!$group->hasPermission('administer members', $account));
  }

  // Don't show the field if the plugin ID didn't match.
  return AccessResult::forbidden();
}

/**
 * Implements hook_user_cancel_methods_alter().
 */
function group_user_cancel_methods_alter(&$methods) {
  $methods['user_cancel_block']['title'] = t('Disable the account and keep its content and groups.');
  $methods['user_cancel_block']['description'] .= ' ' . t('Groups that were created by you will still list you as the owner.');
  $methods['user_cancel_block_unpublish']['title'] .= ' ' . t('Does not affect groups.');
  $methods['user_cancel_block_unpublish']['description'] .= ' ' . t('Groups that were created by you will remain visible.');
  $methods['user_cancel_reassign']['title'] .= ' ' . t('Reassign its groups to the super administrator.');
  $methods['user_cancel_reassign']['description'] .= ' ' . t('All of your groups will be assigned to the super administrator.');
  $methods['user_cancel_delete']['title'] = t('Delete the account, its content and groups.');
  $methods['user_cancel_delete']['description'] .= ' ' . t('This includes groups that were created by you, including all of their content relationships!');
}

/**
 * Implements hook_user_cancel().
 */
function group_user_cancel($edit, $account, $method) {
  // Reassign all groups to the super user.
  if ($method == 'user_cancel_reassign') {
    $storage = \Drupal::entityTypeManager()->getStorage('group');
    $gids = $storage->getQuery()
      ->condition('uid', $account->id())
      ->execute();

    // Run this as a batch if there are more than 10 groups.
    if (count($gids) > 10) {
      batch_set(['operations' => [['_group_mass_reassign_to_super_user', [$gids]]]]);
    }
    // Run it immediately if not.
    else {
      foreach ($storage->loadMultiple($gids) as $group) {
        /** @var \Drupal\group\Entity\GroupInterface $group */
        $group->set('uid', 1);
        $storage->save($group);
      }
    }
  }
}

/**
 * Implements callback_batch_operation().
 *
 * Mass reassigns ownership of groups to the super user.
 *
 * @param int[] $ids
 *   An array of group IDs.
 */
function _group_mass_reassign_to_super_user(array $ids, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($ids);
    $context['sandbox']['ids'] = $ids;
  }

  // Try to update 10 groups at a time.
  $ids = array_slice($context['sandbox']['ids'], $context['sandbox']['progress'], 10);

  $storage = \Drupal::entityTypeManager()->getStorage('group');
  foreach ($storage->loadMultiple($ids) as $group) {
    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group->set('uid', 1);
    $storage->save($group);
    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function group_user_predelete(EntityInterface $account) {
  // If a user is deleted, we delete all of their groups too.
  $storage = \Drupal::entityTypeManager()->getStorage('group');
  if ($groups = $storage->loadByProperties(['uid' => $account->id()])) {
    $storage->delete($groups);
  }
}

/**
 * @defgroup group_access Group access rights
 * @{
 * The group access system determines who can do what in which groups.
 *
 * Each group type can specify an unlimited amount of group roles. Just like
 * user roles in the global scope, a group role can be assigned specific
 * permissions. Users who are then given such group roles will be able to
 * perform any action their permissions allow them.
 *
 * There are three categories of users who are eligible to receive group roles:
 * - Anonymous: These users do not have a site account and will only receive the
 *   'anonymous' group role, which typically grants them a very limited set of
 *   permissions.
 * - Outsider: These users have a site account, but are not yet a member of the
 *   group in question. They will only receive the 'outsider' group role. This
 *   role is usually more permissive than 'anonymous'.
 * - Member: These users have a site account and are part of the group. They
 *   will automatically receive the 'member' role but can be assigned any other
 *   user defined group role. Common examples are: Editor, Admin, etc.
 *
 * Please keep in mind that the 'anonymous', 'outsider' and 'member' role will
 * always be assigned because they're assumed roles based on the user's account
 * status.
 */

// Nothing to see here yet, our own access hook implementations will go here.

/**
 * @} End of "defgroup group_access".
 */
