<?php
/**
 * Implements hook_theme().
 */
function leaflet_theme($existing, $type, $theme, $path) {
  return array(
    'leaflet_map' => array(
      'variables' => array(
        'map_id' => NULL,
        'height' => '400px',
        'map' => array(),
      ),
    ),
  );
}

/**
 * Load all Leaflet required client files and return markup for a map.
 *
 * @param array $map
 * @param array $features
 * @param string $height
 *
 * @return array render array
 */
function leaflet_render_map($map, $features = array(), $height = '400px') {
  $map_id = Drupal\Component\Utility\Html::getUniqueId('leaflet_map');

  $settings[$map_id] = array(
    'mapId' => $map_id,
    'map' => $map,
    // JS only works with arrays, make sure we have one with numeric keys.
    'features' => array_values($features),
  );
  return array(
    '#theme' => 'leaflet_map',
    '#map_id' => $map_id,
    '#height' => $height,
    '#map' => $map,
    '#attached' => array(
      'library' => array('leaflet/leaflet-drupal'),
      'drupalSettings' => array(
        'leaflet' => $settings,
      ),
    ),
  );
}

/**
 * Get all available Leaflet map definitions.
 *
 * @param string $map
 */
function leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['leaflet_map_info'];

  if (empty($map_info)) {
    if ($cached = Drupal::cache()->get('leaflet_map_info')) {
      $map_info = $cached->data;
    }
    else {
      $map_info = Drupal::moduleHandler()->invokeAll('leaflet_map_info');

      // Let other modules alter the map info.
      Drupal::moduleHandler()->alter('leaflet_map_info', $map_info);

      Drupal::cache()->set('leaflet_map_info', $map_info);
    }
  }

  if (empty($map)) {
    return $map_info;
  }
  elseif (isset($map_info[$map])) {
    return $map_info[$map];
  }
}

/**
 * Implements hook_leaflet_map_info() to return a default map.
 *
 * @return array
 */
function leaflet_leaflet_map_info() {
  return array(
    'OSM Mapnik' =>
      array(
        'label' => 'OSM Mapnik',
        'description' => t('Leaflet default map.'),
        'settings' => array(
          'dragging' => TRUE,
          'touchZoom' => TRUE,
          'scrollWheelZoom' => TRUE,
          'doubleClickZoom' => TRUE,
          'zoomControl' => TRUE,
          'attributionControl' => TRUE,
          'trackResize' => TRUE,
          'fadeAnimation' => TRUE,
          'zoomAnimation' => TRUE,
          'closePopupOnClick' => TRUE,
        ),
        'layers' => array(
          'earth' => array(
            'urlTemplate' => '//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            'options' => array(
              'attribution' => 'OSM Mapnik'
            )
          ),
        ),
      ),
  );
}

/**
 * Convert a geofield into an array of map points.
 *
 * The map points can then be fed into leaflet_render_map().
 *
 * @param mixed $items
 *   A single vlaue or array of geo values, each as a string in any of the
 *   supported formats or as an array of $item elements, each with a
 *   $item['wkt'] field.
 *
 * @return array
 */
function leaflet_process_geofield($items = array()) {

  if (!is_array($items)) {
    $items = array($items);
  }
  $data = array();
  foreach ($items as $item) {
    // Auto-detect and parse the format (e.g. WKT, JSON etc)
    if (!($geom = geoPHP::load(isset($item['wkt']) ? $item['wkt'] : $item))) {
      continue;
    }
    $datum = array('type' => strtolower($geom->geometryType()));

    switch ($datum['type']) {
      case 'point':
        $datum += array(
          'lat' => $geom->getY(),
          'lon' => $geom->getX(),
        );
        break;

      case 'linestring':
        $components = $geom->getComponents();
        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }
        break;

      case 'polygon':
        $tmp = $geom->getComponents();
        $components = $tmp[0]->getComponents();
        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }
        break;

      case 'multipolygon':
      case 'multipolyline':
      case 'multilinestring':
        if ($datum['type'] == 'multilinestring') {
          $datum['type'] = 'multipolyline';
        }
        if ($datum['type'] == 'multipolygon') {
          $tmp = $geom->getComponents();
          $components = $tmp[0]->getComponents();
        }
        else {
          $components = $geom->getComponents();
        }
        foreach ($components as $key => $component) {
          $subcomponents = $component->getComponents();
          foreach ($subcomponents as $subcomponent) {
            $datum['component'][$key]['points'][] = array(
              'lat' => $subcomponent->getY(),
              'lon' => $subcomponent->getX(),
            );
          }
          unset($subcomponent);
        }
        break;
    }
    $data[] = $datum;
  }

  return $data;
}

/**
 * Implements hook_requirements().
 */
function leaflet_requirements($phase) {
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }
  $library = Drupal::service('library.discovery')
    ->getLibraryByName('leaflet', 'leaflet');

  $requirements['leaflet'] = array(
    'title' => Drupal::translation()->translate('Leaflet library')
  );
  $maps_info = Drupal::translation()->translate('@maps available.', array(
      '@maps' => Drupal::translation()
        ->formatPlural(count(leaflet_map_get_info()), 'One map', '@count maps')
    )
  );

  // Check the defined type of the leaflet.js file; if it is external then
  // assume that we are using a CDN version.
  if ($library['js'][0]['type'] == 'external') {
    $requirements['leaflet']['value'] = Drupal::translation()
        ->translate('Using CDN version @version.', array(
          '@version' => $library['version']
        )) . ' ' . $maps_info;
  }
  // If leaflet.js is defined to be a local file, check that it exists and show
  // an error if it does not exist.
  else {
    if (file_exists($library['js'][0]['data'])) {
      $requirements['leaflet']['value'] = Drupal::translation()
          ->translate('Leaflet @version library installed at @path.', array(
            '@version' => $library['version'],
            '@path' => $library['js'][0]['data'],
          )) . ' ' . $maps_info;
      $requirements['leaflet']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['leaflet']['value'] = Drupal::translation()
        ->translate('Leaflet @version library not found at @path. Please !download it to @directory, or undo your changes to the libraries registry to use the CDN version.',
          array(
            '@version' => $library['version'],
            '@path' => $library['js'][0]['data'],
            '@directory' => dirname($library['js'][0]['data']),
            '!download' => Drupal::l('download', Drupal\Core\Url::fromUri($library['remote'])),
          )
        );
      $requirements['leaflet']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}

