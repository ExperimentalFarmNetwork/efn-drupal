<?php

/**
 * @file
 * Contains efn.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\Core\Access\AccessibleInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Url;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function efn_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the efn module.
    case 'help.page.efn':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Helper functions for efn') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function efn_theme() {
  return [
    'efn' => [
      'render element' => 'children',
    ],
  ];
}

// Hide text formatting widget

/**
 * Implements hook_form_alter().
 */
function efn_form_alter(&$form, &$form_state, &$form_id) {
  // Simplify the contact project members form

  if (strpos($form_id, 'iews_form_group_members_page_2') ) {

    $form['field_description']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['field_project_report']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form_state->setValue(['views_send_tokens'], ['mail_pos_2' => 'mail']);
    $values = $form_state->getValues();
    $build_info = $form_state->getBuildInfo();
    $view = $build_info['args'][0];

    if ($form_state->getStorage()['step'] == 'views_send_config_form') {
      $user = \Drupal::currentUser();
      $form['from']['#title'] = t('Your Details');
      $form['from']['#collapsed'] = TRUE;
      $form['from']['views_send_from_name']['#title'] = t('Your name');
      $form['from']['views_send_from_name']['#default_value'] = $user->getDisplayName();
      $form['from']['views_send_from_name']['#description'] = NULL;
      $form['from']['views_send_from_mail']['#title'] = t('Your e-mail');
      $form['from']['views_send_from_mail']['#default_value'] = t('robot@experimentalfarmnetwork.org');
      $form['from']['views_send_from_mail']['#description'] = t('If you wish to send your enquiry from a different e-mail address please change it here.');
      $form['to']['views_send_to_name']['#default_value'] = 'name_pos_0';
      $form['to']['views_send_to_mail']['#default_value'] = 'nothing_pos_2';
      $form['to']['#access'] = FALSE;
      $form['mail']['token']['#access'] = FALSE;
      $form['additional']['#access'] = FALSE;
      $form['views_send_direct']['#access'] = FALSE;
      $form['views_send_remember']['#access'] = FALSE;
      $form['views_send_carbon_copy']['#access'] = FALSE;
    } 
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function efn_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  if(isset($view) && $view->id() == 'group_members' && $variables['field']->field == 'nothing') {
    $email = $variables['row']->_relationship_entities['gc__user']->getEmail();
    $variables['output'] = $email;
  }
}

function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }
  return $form_element;
}

// Tell the user to login or join

/**
 * Implements hook_entity_view().
 *
 */
function efn_entity_view(array $build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){
  if($entity->getEntityTypeId()=="group"){
    $user = \Drupal::currentUser();
    $roles = $user->getRoles($exclude_locked_roles = false);
    $join=t("To participate, you must create a profile and join this project");
    $participate=t("You need to join this project to participate ➪➪➪");
    $gmembers=$entity->getMembers();
    $membersList=[];
    foreach ($gmembers as $value) {
      $string=$value->getUser()->id();
      $membersList[]=$string;
    }
    if (in_array("anonymous", $roles)){
      drupal_set_message($join, 'status', FALSE);
    } elseif(!in_array($user->id(), $membersList)) {
      drupal_set_message($participate, 'status', FALSE);
    }
  }
}

// Make sure only researchers can create projects

/**
 * Implements hook_form_FORM_ID_alter() for group_project_add_form().
 */
function efn_form_group_project_add_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $user = \Drupal::currentUser();
  $uid=$user->id();
  $roles=$user->getRoles($exclude_locked_roles = false);

  if (!in_array('researcher',$roles)){
    $profile_link='<a href="/user/'.$uid.'/researcher">researcher profile</a>';
    $rprofile_url="/user/".$uid."/researcher";
    $message="<div class='missing-researcher'>You need to create a ".$profile_link." before creating a new project!</div>";

    $form["#access"]=FALSE;
    $form['#markup'] = t($message);
    $form['#cache'] = [
      'contexts' => [],
      'max-age' => 0,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for group_project_edit_form().
 */
function efn_form_group_project_edit_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

// Only show featured checkbox for administrators
  $user = \Drupal::currentUser();
  $uid=$user->id();
  $roles=$user->getRoles($exclude_locked_roles = false);
  if (!in_array('administrator',$roles)){
    unset($form['field_featured_project']);
  }
  // Fix stupid button text
  $form['actions']['submit']['#value'] = t('Save changes');
}

// Edit profile tabs.

/**
 * Implements hook_local_tasks_alter()
 */
function efn_menu_local_tasks_alter(&$data, $route_name) {
  foreach ($data['tabs'] as &$tabs) {
    foreach ($tabs as &$tab) {
      $route_name = $tab['#link']['url']->getRouteName();
      if ($route_name == 'entity.profile.type.user_profile_form') {
        // $tab['#link']['title'] = t('View profile');
        $tab['#link']['title'] = "Edit " . $tab['#link']['title'];
      }
      elseif ($route_name == 'entity.user.edit_form') {
        $tab['#link']['title'] = "Edit Account";
      }
      elseif ($route_name == 'entity.user.contact_form') {
        $tab['#weight'] = 101;
      }
    }
  }
}

// Make the member for label better

/**
 * Implements hook_entity_view_alter().
 *
 */
function efn_user_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display){
  if ($display->getComponent('member_for')) {
    $build['member_for'] = [
      '#type' => 'item',
      '#markup' => '<div class="member label">' . t('Member for') . '</div> ' . \Drupal::service('date.formatter')->formatTimeDiffSince($entity->getCreatedTime()),
    ];
  }
}

// Notifications for new group content

/**
 * Implements hook_entity_insert().
 */
function efn_entity_insert(EntityInterface $entity) {
  // Notifications for Project Updates
 if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'project_update') {
   $group = \Drupal::routeMatch()->getParameter('group');
   $gid =$group->id();

   // Get group members
   $query = \Drupal::database()
   ->select('group_content_field_data', 'gc')
   ->fields('gc', ['entity_id'])
   ->condition('gc.gid', $gid)
   ->condition('gc.type', 'project-group_membership')
   ->execute();
   $results = $query->fetchAll();

   // Get their emails
   foreach ($results as $result) {
     $uid = $result->entity_id;
     if($user_entity = User::load($uid)){
       $mails[] = $user_entity->get('mail')->getValue()[0]['value'];
     }
   }

   // Add group owner
   $mails[] = $group->getOwner()->getEmail();

   // Loop through them all and send them all an email
   $mailManager = \Drupal::service('plugin.manager.mail');
   foreach ($mails as $key => $mail) {
     $module = 'efn';
     $key = 'node_insert';
     $to = $mail;


     $author = $entity->getOwner()->getDisplayName();
     $title = $entity->getTitle();
     $group_title = $group->label();
     $message = "➥ Project update:\n";
     $message .= "\n" . $author . " just published: " . $title;
     $message .= "\n\n" . html_entity_decode(strip_tags(($entity->get('body')->value)));
     $message .= "\n\n * " . $group_title . ": https://www.experimentalfarmnetwork.org/project/" . $gid . " *";

     efn_stopdevmail($message, $to, $mails, $mail);

     $params['message'] = t($message);
     $params['title'] = "✭✭✭ New EFN Project Update: " . $title ."✭✭✭";
     $params['title'] = t($params['title']);
     $params['node_title'] = $entity->label();
     $langcode = \Drupal::currentUser()->getPreferredLangcode();
     $send = true;

     // The hook_mail function down below does things with this
     $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

     if ($result['result'] !== true) {
       $message = t('There was a problem sending your email notification to @email for creating node @id.', array('@email' => $to, '@id' => $entity->id()));
       drupal_set_message($message, 'error');
       \Drupal::logger('efn')->error($message);
       return;
     }

     $message = t('An email notification has been sent to @email for Project Update @id.', array('@email' => $to, '@id' => $entity->id()));
     drupal_set_message($message);
     \Drupal::logger('efn')->notice($message);
   }
 }
 // Notifications for owner when new Group Members.
 if ($entity->bundle() === 'project-group_membership' && ($group = \Drupal::routeMatch()->getParameter('group'))) {
   $group = \Drupal::routeMatch()->getParameter('group');
   $gid =$group->id();

   // Group owner gets all the email here
   $mail = $group->getOwner()->getEmail();

   // // Loop through them all and send them all an email
   $mailManager = \Drupal::service('plugin.manager.mail');
   $module = 'efn';
   $key = 'node_insert';
   $to = $mail;

   $group_title = $group->label();
   $uid = $entity->get('entity_id')->getValue()[0]['target_id'];
   $member = \Drupal\user\Entity\User::load($uid);
   $member_name = $member->label();

   $message = "➽ New Member Alert:\n";
   $message .= "\n" . $member_name . " just joined: " . $group_title;
   $message .= "\n\n * " . $group_title . ": https://www.experimentalfarmnetwork.org/group/" . $gid . "/members *";

   efn_stopdevmail($message, $to, $mails, $mail);

   $params['message'] = t($message);
   $params['title'] = "🙋 New Member in the project: " . $group_title;
   $params['title'] = t($params['title']);
   $params['node_title'] = $entity->label();
   $langcode = \Drupal::currentUser()->getPreferredLangcode();
   $send = true;

   // The hook_mail function down below does things with this
   $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

   if ($result['result'] !== true) {
     $message = t('There was a problem sending your email notification to @email for creating node @id.', array('@email' => $to, '@id' => $entity->id()));
     drupal_set_message($message, 'error');
     \Drupal::logger('efn')->error($message);
     return;
   }

   $message = t('An email notification has been sent to @email for Project Update @id.', array('@email' => $to, '@id' => $entity->id()));
   // drupal_set_message($message);
   \Drupal::logger('efn')->notice($message);
 }
}

/**
 * Implements hook_comment_insert().
 */
function efn_comment_insert($comment) {

  $entity = $comment->getCommentedEntity();

  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'project_update') {
    $nid = $entity->id();

    // Get group
    $query = \Drupal::database()
    ->select('group_content_field_data', 'gc')
    ->fields('gc', ['gid'])
    ->condition('gc.entity_id', $nid)
    ->condition('gc.type', 'group_content_type_43c14e35a52cb')
    ->execute();
    $gid_results = $query->fetchAll();
    $gid = $gid_results[0]->gid;
    $group = \Drupal::entityTypeManager()->getStorage('group')->load($gid);

    // Get group members
    $query = \Drupal::database()
    ->select('group_content_field_data', 'gc')
    ->fields('gc', ['entity_id'])
    ->condition('gc.gid', $gid)
    ->condition('gc.type', 'project-group_membership')
    ->execute();
    $results = $query->fetchAll();

    // Get their emails.
    foreach ($results as $result) {
      $uid = $result->entity_id;
      if($user_entity = User::load($uid)){
        $mails[] = $user_entity->get('mail')->getValue()[0]['value'];
      }
    }

    $comment_body = $comment->get('field_comment_body')->getValue();

    // Add the group owner.
    $mails[] = $group->getOwner()->getEmail();

    // Loop through them all and send them all an email
    $mailManager = \Drupal::service('plugin.manager.mail');
    foreach ($mails as $key => $mail) {
      $module = 'efn';
      $key = 'comment_insert';
      $to = $mail;

      $author = $comment->getOwner()->getDisplayName();
      $title = $entity->getTitle();
      $group_title = $group->label();
      $message = "➥ New comment in the project: " . $group_title . "\n";
      $message .= "\n" . $author . " just commented on the Project update " . $title . ":";
      $message .= "\n\n" . html_entity_decode(strip_tags(($comment->get('field_comment_body')->value)));
      $message .= "\n\n * " . $group_title . ": https://www.experimentalfarmnetwork.org/project/" . $gid . " *";

      efn_stopdevmail($message, $to, $mails, $mail);

      $params['message'] = t($message);
      $params['title'] = "✎✎✎ New Comment on EFN Project Update: " . $title ."✎✎✎";
      $params['title'] = t($params['title']);
      $params['node_title'] = $entity->label();
      $langcode = \Drupal::currentUser()->getPreferredLangcode();
      $send = true;

      // The hook_mail function down below does things with this
      $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

      if ($result['result'] !== true) {
        $message = t('There was a problem sending your email notification to @email for creating node @id.', array('@email' => $to, '@id' => $entity->id()));
        drupal_set_message($message, 'error');
        \Drupal::logger('efn')->error($message);
        return;
      }

      $message = t('An email notification has been sent to Project Members');
      drupal_set_message($message);
      $log_message = t('New comment posted and emailed in Group: @gid | Project Update: @nid | User: @uid ', array('@gid' => $gid, '@nid' => $nid, '@uid' => $comment->getOwner()->id()));
      \Drupal::logger('efn')->notice($log_message);
    }
  }

}

/**
 * Implements hook_mail().
 */
function efn_mail($key, &$message, $params) {
  switch ($key) {
    case 'node_insert':
      $message['subject'] = $params['title'];
      $message['body'][] = $params['message'];
			break;
    case 'comment_insert':
      $message['subject'] = $params['title'];
      $message['body'][] = $params['message'];
			break;
  }
}

function efn_stopdevmail(&$message, &$to, $mails, $mail) {
  if ($_SERVER['HTTP_HOST'] != 'experimentalfarmnetwork.org') {
    $to = 'onion@radicante.media';
    $message .= "\n\n current email:" . $mail;
    $message .= "\n\n Should have gone to: ". implode(", ", $mails) . "\n";
  }
}
