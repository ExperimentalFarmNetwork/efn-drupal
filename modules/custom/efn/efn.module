<?php

/**
 * @file
 * Contains efn.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\Core\Access\AccessibleInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function efn_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the efn module.
    case 'help.page.efn':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Helper functions for efn') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function efn_theme() {
  return [
    'efn' => [
      'render element' => 'children',
    ],
  ];
}

// Hide text formatting widget

/**
 * Implements hook_field_widget_form_alter().
 */
function efn_form_alter(&$form, &$form_state, &$form_id) {
    $form['field_description']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['field_project_report']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
}

function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {

  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }
  return $form_element;
}

// Tell the user to login or join

/**
 * Implements hook_entity_view().
 *
 */
function efn_entity_view(array $build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){
  if($entity->getEntityTypeId()=="group"){
    $user = \Drupal::currentUser();
    $roles = $user->getRoles($exclude_locked_roles = false);
    $join=t("To participate, you must create a profile and join this project");
    $participate=t("You need to join this project to participate ➪➪➪");
    $gmembers=$entity->getMembers();
    $membersList=[];
    foreach ($gmembers as $value) {
      $string=$value->getUser()->id();
      $membersList[]=$string;
    }
    if (in_array("anonymous", $roles)){
      drupal_set_message($join, 'status', FALSE);
    } elseif(!in_array($user->id(), $membersList)) {
      drupal_set_message($participate, 'status', FALSE);
    }
  }
}

// Make sure only researchers can create projects

/**
 * Implements hook_form_FORM_ID_alter() for group_project_add_form().
 */
function efn_form_group_project_add_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $user = \Drupal::currentUser();
  $uid=$user->id();
  $roles=$user->getRoles($exclude_locked_roles = false);

  if (!in_array('researcher',$roles)){
    $profile_link='<a href="/user/'.$uid.'/researcher">researcher profile</a>';
    $rprofile_url="/user/".$uid."/researcher";
    $message="<div class='missing-researcher'>You need to create a ".$profile_link." before creating a new project!</div>";

    $form["#access"]=FALSE;
    $form['#markup'] = t($message);
    $form['#cache'] = [
      'contexts' => [],
      'max-age' => 0,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for group_project_edit_form().
 */
function efn_form_group_project_edit_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

// Only show featured checkbox for administrators
  $user = \Drupal::currentUser();
  $uid=$user->id();
  $roles=$user->getRoles($exclude_locked_roles = false);
  if (!in_array('administrator',$roles)){
    unset($form['field_featured_project']);
  }
  // Fix stupid button text
  $form['actions']['submit']['#value'] = t('Save changes');
}

// Add tabs for mass email and csv export

/**
 * Implements hook_local_tasks_alter()
 */
function efn_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == 'entity.user.collection') {
    // Add a tab linking to node/add to all pages.
    $data['tabs'][0]['view.user_admin_people.page_2'] = [
      '#theme' => 'menu_local_task',
      '#link' => [
        'title' => t('Email Users'),
        'url' => Url::fromRoute('view.user_admin_people.page_2'),
        'localized_options' => [
          'attributes' => [
            'title' => t('Email Users'),
          ],
        ],
      ],
    ];
    $data['tabs'][0]['view.user_admin_people.rest_export_1'] = [
      '#theme' => 'menu_local_task',
      '#link' => [
        'title' => t('Export Users'),
        'url' => Url::fromRoute('view.user_admin_people.rest_export_1'),
        'localized_options' => [
          'attributes' => [
            'title' => t('Export Users'),
          ],
        ],
      ],
    ];
  }
}

// Make the member for label better

/**
 * Implements hook_entity_view_alter().
 *
 */
function efn_user_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display){
  if ($display->getComponent('member_for')) {
    $build['member_for'] = [
      '#type' => 'item',
      '#markup' => '<div class="member label">' . t('Member for') . '</div> ' . \Drupal::service('date.formatter')->formatTimeDiffSince($entity->getCreatedTime()),
    ];
  }
}
