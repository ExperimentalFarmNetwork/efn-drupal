<?php

/**
 * @file
 * Provides functionality for handling postal addresses.
 */

/**
 * Implements hook_theme().
 */
function address_theme() {
  return [
    'address_plain' => [
      'variables' => [
        'given_name' => '',
        'additional_name' => '',
        'family_name' => '',
        'organization' => '',
        'address_line1' => '',
        'address_line2' => '',
        'postal_code' => '',
        'sorting_code' => '',
        'dependent_locality' => [],
        'locality' => [],
        'administrative_area' => [],
        'country' => [],
      ],
    ],
  ];
}

/**
 * Updates the given entity's field for the RC1 changes.
 *
 * @param $entity
 *   The entity.
 * @param $field_name
 *   The name of the field to update.
 */
function _address_update_entity($entity, $field_name) {
  $update_helper = '\CommerceGuys\Addressing\UpdateHelper';
  foreach ($entity->{$field_name} as $delta => $address) {
    $names = $update_helper::splitRecipient($address->given_name, $address->country_code);
    $address->given_name = $names['givenName'];
    $address->family_name = $names['familyName'];
    // Now update the subdivisions.
    $address->administrative_area = $update_helper::updateSubdivision($address->administrative_area);
    $address->locality = $update_helper::updateSubdivision($address->locality);
    $address->dependent_locality = $update_helper::updateSubdivision($address->dependent_locality);
  }
}

/**
 * Implements hook_module_implements_alter() for hook_tokens.
 */
function address_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'tokens') {
    $group = $implementations['address'];
    unset($implementations['address']);
    $implementations['address'] = $group;
  }
}
